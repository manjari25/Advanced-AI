% Question 4c - Batch Gradient Descent
% Question 4b - Compute linear regression coefficients
clc;
clear all;
close all;
data = load ('columbus_price_vs_sf.txt');
y=data(:,1);
x=data(:,2);
delta_w1 = 1;
delta_w0 = 1;
N = size(data,1);
s_xy = 0;
s_x2 = 0;
% sigma of xi*yi
for i = 1:N
    s_xy = s_xy + (data(i,1)*data(i,2));
end
% sigma of xi^2
for i = 1:N
    s_x2 = s_x2 + (data(i,2)^2);
end
% sigma of xi and yi
s_x_y = sum(data);

% Calculate w1 and w0
w1 = ((N*(s_xy)) - (s_x_y(1,2)*s_x_y(1,1)))/((N*(s_x2))- (s_x_y(1,2)^2));
w0 = (s_x_y(1,1) - (w1*s_x_y(1,2)))/N;

% Display the coefficients
fprintf('Coefficients are - \n w1 = %.10f, w0 = %.10f',w1,w0);
ow1 = w1;
ow0 = w0;
alpha = 0.0000000001;
count = 0;
epsilon = 0.00001;
w1 = ow1+100;
w0 = ow0+100;

% for num=1:30000
while true
    fprintf('\n w1 = ');
    disp(w1);
    fprintf(', w0 = ');
    disp(w0);
    fw0=0;
    fw1=0;
   for i=1:N
       yMinusH = y(i,1)-(w1*x(i,1)+w0);
       fw0 = fw0 + yMinusH;
       fw1 = fw1 + yMinusH*x(i,1);
   end 
   deltaw0 = alpha*fw0;
   deltaw1 = alpha*fw1;

   neww0 = w0+deltaw0;
   neww1 = w1+deltaw1;
   
   if((abs(neww0 - w0) > epsilon) || (abs(neww1 - w1) >= epsilon))
       w0 = neww0;
       w1 = neww1;
       count = count+1;
   else
       break;
   end
end
fprintf('\nOptimal w1 = %f,w0 = %f',ow1,ow0);
fprintf('Final - \n w1 = ');
disp(w1);
fprintf(', w0 = ');
disp(w0);
			









% 
% 
% %Update w1,w0 until convergence
% % for num=1:28000
% while true %((abs(delta_w1)>epsilon)||(abs(delta_w0)>epsilon))
%    % Display w1 and w0
%    fprintf('\nw1 = %f, w0 = %f',w1,w0);
%   
%    % sigma yj-predicted yj(w0) and    sigma (yj-predicted yj)*xj(w1)
%    for i=1:N
%        fw0 = fw0 + y(i,1)-(w1*x(i,1)+w0);
%        fw1 = fw1 + (y(i,1)-(w1*x(i,1)+w0))*x(i,1);
%    end
%    
%    %Update factor
%    delta_w0 = alpha*fw0;
%    delta_w1 = alpha*fw1;
%    
%    neww0 = w0+delta_w0;
%    neww1 = w1+delta_w1;
% 			
% 			if((abs(neww0 - w0) > epsilon) || (abs(neww1 - w1) >= epsilon))
% 				w0 = neww0;
% 				w1 = neww1;
% 				count = count+1;
%             end
% %    
% %    % Update weights
% % %    if (abs(delta_w1)>epsilon)
% %         w0 = w0 + delta_w0;
% %         w1 = w1 + delta_w1;
% % %    end
% % %    if(abs(delta_w0)>epsilon)
% % 
% % %    end
% %         
% %    % Update count variable to count iterations
% %    count = count+1;
% end
% 
% fprintf('\nFinal w1 = %f, w0 = %f',w1,w0);
% fprintf('\nActual w1 = %f, w0 = %f',a,b);
% 
% % %Stochastic
% % 
% % w1 = a+100;
% % w0 = b+100;
% % i=1;
% % %Update w1,w0 until convergence
% % while ((abs(delta_w1)>epsilon)||(abs(delta_w0)>epsilon))
% %    % Display w1 and w0
% %    fprintf('\nw1 = %f, w0 = %f',w1,w0);
% %    
% %    % sigma (yj-predicted yj)*xj(w1)
% %    predicted_y_x = (y(i,1)-(w1*x(i,1)+w0))*x(i,1);
% %           
% %    % sigma yj-predicted yj(w0)
% %    err = y(i,1)-(w1*x(i,1)+w0);
% %       
% %    %Update factor
% %    delta_w1 = alpha*predicted_y_x;
% %    delta_w0 = alpha*err;
% %    
% %    % Update weights
% %    if (abs(delta_w1)>epsilon)
% %         w1 = w1 + delta_w1;
% %    end
% %    if(abs(delta_w0)>epsilon)
% %         w0 = w0 + delta_w0;
% %    end
% %         
% %    % Update count variable to count iterations
% %    count = count+1;
% %    if(i==222)
% %        i=1;
% %    else
% %        i=i+1;
% %    end
% %    
% % end